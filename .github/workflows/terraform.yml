name: Terraform and tfsec

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: Dev
    permissions: write-all

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1

  # Trivy stage
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'

    # Save trivy output to artifacts
    - name: Upload the trivy output
      uses: actions/upload-artifact@v3
      with:
        name: trivy-output
        path: 'trivy-results.sarif'
        
# Configuring credentials for github actions
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

 # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

# Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   id: fmt
    #   run: terraform fmt -check

# Checks that all Terraform configuration files are correctly written
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

# Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      # if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'
      run: |
        terraform plan -no-color -input=false \
        -out tf.plan
        terraform show -no-color tf.plan > tfplan.txt
      continue-on-error: true

    # - name: Terraform Plan
    #   id: tf-plan
    #   run: |
    #     export exitcode=0
    #     terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

    #     echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
    #     if [ $exitcode -eq 1 ]; then
    #       echo Terraform Plan Failed!
    #       exit 1
    #     else 
    #       exit 0
    #     fi
      
  # Save plan to artifacts
    - name: Upload the terraform plan output
      uses: actions/upload-artifact@v4
      with:
        name: tf-plan
        path: tfplan.txt

  # tfsec stage to check 
    - name: tfsec
      uses: aquasecurity/tfsec-sarif-action@v0.1.0
      with:
        sarif_file: tfsec.sarif 

    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     # Path to SARIF file relative to the root of the repository
    #     sarif_file: tfsec.sarif   

    # Save tfsec output to artifacts
    - name: Upload the tfsec output
      uses: actions/upload-artifact@v3
      with:
        name: tfsec-output
        path: tfsec.sarif

    # checkov stage
    - name: Checkov GitHub Action
      uses: bridgecrewio/checkov-action@v12
      with:
       # This will add both a CLI output to the console and create a results.sarif file
         output_format: cli,sarif
         output_file_path: console,checkov-results.sarif
         soft_fail: true # optional: do not return an error code if there are failed checks

     # Save checkov output to artifacts
    - name: Upload the tfsec output
      uses: actions/upload-artifact@v3
      with:
        name: checkov-output
        path: checkov-results.sarif

    # - name: Download the build output
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: tfsec-output

    # Terraform docs
    - name: Render terraform docs and push changes back to PR
      uses: terraform-docs/gh-actions@v1.2.0
      with:
        working-dir: .,Modules/ec2/,Modules/security-group/
        # working-dir: Modules/ec2/
        output-file: TFDOC.md
        output-method: replace
        # git-push: "true"

      # Save checkov output to artifacts
    - name: Upload the tf doc
      uses: actions/upload-artifact@v3
      with:
        name: tf-doc
        path: TFDOC.md


    - name: README.md generation
      uses: terraform-docs/gh-actions@main
      id: tfdocs
      with:
        # config-file: terraform-docs.yml
        working-dir: .
        output-file: README.md
        output-method: inject
        # git-push: "true"
